def plot(frame, max_min, idx_map, choice, add_line=False):

	def check_proj(input_chain):
		output_chain = []
		for idx, ele in enumerate(input_chain):
			if idx_map[ele][choice] != -1:
				output_chain.append(idx_map[ele][choice])
		if len(output_chain) > 0:
			print('outchain', output_chain)
		return output_chain


	'''
	ap0 = [[-0.00001, -0.00002, 1.00830],
	[0.14475, -0.07537, 0.99674],
	[0.13747, -0.10477, 0.51222],
	[0.05090, -0.27371, 0.07246],
	[-0.14476, 0.07535, 1.01964],
	[-0.19476, -0.03135, 0.54859],
	[-0.33582, -0.27418, 0.14530],
	[0.03465, 0.07187, 1.27154],
	[0.08203, 0.09819, 1.55611],
	[0.13682, 0.16097, 1.71822],
	[0.09326, 0.02394, 1.77841],
	[-0.10811, 0.13847, 1.54135],
	[-0.40501, 0.27080, 1.54436],
	[-0.48869, 0.47729, 1.79511],
	[0.21069, -0.01737, 1.48483],
	[0.39367, -0.21920, 1.31686],
	[0.63089, -0.16669, 1.51139]]
	'''
	ap = np.array(frame, dtype='float32')
	np_data = ap

	xp = np_data.T[0].T
	yp = np_data.T[1].T
	zp = np_data.T[2].T

	fig = plt.figure(figsize=(30, 60))
	ax = plt.subplot2grid((1, 1), (0, 0), rowspan=1, colspan=1, projection='3d')

	#ax = fig.add_subplot(121, projection='3d')
	#ax_pred = fig.add_subplot(122, projection='3d')

	'''
	radius = 1.7
	ax.set_xlim3d([-radius / 2, radius / 2])
	ax.set_zlim3d([0, radius])
	ax.set_ylim3d([-radius / 2, radius / 2])
	ax.dist = 7.5
	ax_pred.set_xlim3d([-radius / 2, radius / 2])
	ax_pred.set_zlim3d([0, radius])
	ax_pred.set_ylim3d([-radius / 2, radius / 2])
	ax_pred.dist = 7.5
	'''

	# 3D scatter
	ax.scatter3D(zp, xp, yp, cmap='Greens')

	#左腿
	chain1 = [0, 1, 4, 7, 10]
	chain1 = check_proj(chain1)
	#左脚
	chain11 = [10, 60]
	chain12 = [10, 61]
	chain13 = [10, 62]
	chain11 = check_proj(chain11)
	chain12 = check_proj(chain12)
	chain13 = check_proj(chain13)

	ax.plot(zp[chain1], xp[chain1], yp[chain1], ls='-', color='red')
	ax.plot(zp[chain11], xp[chain11], yp[chain11], ls='-', color='red')
	ax.plot(zp[chain12], xp[chain12], yp[chain12], ls='-', color='red')
	ax.plot(zp[chain13], xp[chain13], yp[chain13], ls='-', color='red')

	#右腿
	chain2 = [0, 2, 5, 8, 11]
	chain2 = check_proj(chain2)
	#右脚
	chain21 = [11, 63]
	chain22 = [11, 64]
	chain23 = [11, 65]
	chain21 = check_proj(chain21)
	chain22 = check_proj(chain22)
	chain23 = check_proj(chain23)

	ax.plot(zp[chain2], xp[chain2], yp[chain2], ls='-', color='blue')
	ax.plot(zp[chain21], xp[chain21], yp[chain21], ls='-', color='blue')
	ax.plot(zp[chain22], xp[chain22], yp[chain22], ls='-', color='blue')
	ax.plot(zp[chain23], xp[chain23], yp[chain23], ls='-', color='blue')

	#脊柱
	chain3 = [0, 3, 6, 9]
	#脊柱脖子头
	chain31 = [9, 12, 15]
	#左臂
	chain32 = [9, 13, 16, 18, 20]
	#右臂
	chain33 = [9, 14, 17, 19, 21]

	chain3 = check_proj(chain3)
	chain31 = check_proj(chain31)
	chain32 = check_proj(chain32)
	chain33 = check_proj(chain33)

	ax.plot(zp[chain3], xp[chain3], yp[chain3], ls='-', color='gray')
	ax.plot(zp[chain31], xp[chain31], yp[chain31], ls='-', color='gray')
	ax.plot(zp[chain32], xp[chain32], yp[chain32], ls='-', color='red')
	ax.plot(zp[chain33], xp[chain33], yp[chain33], ls='-', color='green')

	#左手
	chain321 = [20, 37, 38, 39, 66] #拇指
	chain322 = [20, 25, 26, 27, 67] #食指
	chain323 = [20, 28, 29, 30, 68] #中指
	chain324 = [20, 34, 35, 36, 69] #无名指
	chain325 = [20, 31, 32, 33, 70] #小指
	chain321 = check_proj(chain321)
	chain322 = check_proj(chain322)
	print(chain323)
	chain323 = check_proj(chain323)
	print(chain323)
	chain324 = check_proj(chain324)
	chain325 = check_proj(chain325)

	ax.plot(zp[chain321], xp[chain321], yp[chain321], ls='-', color='green')
	ax.plot(zp[chain322], xp[chain322], yp[chain322], ls='-', color='green')
	ax.plot(zp[chain323], xp[chain323], yp[chain323], ls='-', color='green')
	ax.plot(zp[chain324], xp[chain324], yp[chain324], ls='-', color='green')
	ax.plot(zp[chain325], xp[chain325], yp[chain325], ls='-', color='green')

	#右手
	chain331 = [21, 52, 53, 54, 71] #拇指
	chain332 = [21, 40, 41, 42, 72] #食指
	chain333 = [21, 43, 44, 45, 73] #中指
	chain334 = [21, 49, 50, 51, 74] #无名指
	chain335 = [21, 46, 47, 48, 75] #小指
	chain331 = check_proj(chain331)
	chain332 = check_proj(chain332)
	chain333 = check_proj(chain333)
	chain334 = check_proj(chain334)
	chain335 = check_proj(chain335)

	ax.plot(zp[chain331], xp[chain331], yp[chain331], ls='-', color='red')
	ax.plot(zp[chain332], xp[chain332], yp[chain332], ls='-', color='red')
	ax.plot(zp[chain333], xp[chain333], yp[chain333], ls='-', color='red')
	ax.plot(zp[chain334], xp[chain334], yp[chain334], ls='-', color='red')
	ax.plot(zp[chain335], xp[chain335], yp[chain335], ls='-', color='red')

	#面部粗关系
	chain411 = [15, 55, 92] #头到鼻子到鼻中（下颚  #15，55，22
	chain412 = [55, 56, 58] #鼻子到左眼到左耳
	chain413 = [55, 57, 59] #鼻子到左眼到左耳
	chain421 = [56, 78] #粗眼到眉心
	chain422 = [57, 83] #粗眼到眉心
	chain431 = [56, 24] #粗眼到细眼
	chain432 = [57, 23] #粗眼到细眼
	chain441 = [55, 110] #鼻子到嘴上
	chain442 = [55, 116] #鼻子到嘴下
	chain451 = [55, 121] #鼻子到唇上中央点
	chain452 = [55, 125] #鼻子到唇下中央点
	chain461 = [55, 22] #鼻子到下颚
	chain462 = [55, 135] #鼻子到面部下廓线
	chain411 = check_proj(chain411)
	chain412 = check_proj(chain412)
	chain413 = check_proj(chain413)
	chain421 = check_proj(chain421)
	chain422 = check_proj(chain422)
	chain431 = check_proj(chain431)
	chain432 = check_proj(chain432)
	chain441 = check_proj(chain441)
	chain442 = check_proj(chain442)
	chain451 = check_proj(chain451)
	chain452 = check_proj(chain452)
	chain461 = check_proj(chain461)
	chain462 = check_proj(chain462)
	

	ax.plot(zp[chain411], xp[chain411], yp[chain411], ls='-', color='red')
	ax.plot(zp[chain412], xp[chain412], yp[chain412], ls='-', color='green')
	ax.plot(zp[chain413], xp[chain413], yp[chain413], ls='-', color='blue')
	ax.plot(zp[chain421], xp[chain421], yp[chain421], ls='-', color='pink')
	ax.plot(zp[chain422], xp[chain422], yp[chain422], ls='-', color='pink')
	ax.plot(zp[chain431], xp[chain431], yp[chain431], ls='-', color='yellow')
	ax.plot(zp[chain432], xp[chain432], yp[chain432], ls='-', color='black')
	ax.plot(zp[chain441], xp[chain441], yp[chain441], ls='-', color='red')
	ax.plot(zp[chain442], xp[chain442], yp[chain442], ls='-', color='green')
	ax.plot(zp[chain451], xp[chain451], yp[chain451], ls='-', color='yellow')
	ax.plot(zp[chain452], xp[chain452], yp[chain452], ls='-', color='blue')
	ax.plot(zp[chain461], xp[chain461], yp[chain461], ls='-', color='purple')
	ax.plot(zp[chain462], xp[chain462], yp[chain462], ls='-', color='purple')

	#眼睛
	chain51 = [23, 102]
	chain52 = [i for i in range(101, 107)] + [101]
	chain53 = [24, 96]
	chain54 = [i for i in range(95, 101)] + [95]
	chain51 = check_proj(chain51)
	chain52 = check_proj(chain52)
	chain53 = check_proj(chain53)
	chain54 = check_proj(chain54)

	ax.plot(zp[chain51], xp[chain51], yp[chain51], ls='-', color='red')
	ax.plot(zp[chain52], xp[chain52], yp[chain52], ls='-', color='green')
	ax.plot(zp[chain53], xp[chain53], yp[chain53], ls='-', color='red')
	ax.plot(zp[chain54], xp[chain54], yp[chain54], ls='-', color='blue')

	#眉毛
	chain61 = [i for i in range(76, 86)] #左眼
	chain61 = check_proj(chain61)

	ax.plot(zp[chain61], xp[chain61], yp[chain61], ls='-', color='pink')

	#鼻子
	chain71 = [92, 89, 88, 87, 86] #鼻中向上
	chain72 = [92, 91, 90] #鼻中向左
	chain73 = [92, 93, 94] #鼻中向右
	chain71 = check_proj(chain71)
	chain72 = check_proj(chain72)
	chain73 = check_proj(chain73)

	ax.plot(zp[chain71], xp[chain71], yp[chain71], ls='-', color='orange')
	ax.plot(zp[chain72], xp[chain72], yp[chain72], ls='-', color='blue')
	ax.plot(zp[chain73], xp[chain73], yp[chain73], ls='-', color='yellow')

	#嘴
	chain81 = [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 107]
	chain82 = [119, 120, 121, 122, 123, 124, 125, 126, 119]
	chain81 = check_proj(chain81)
	chain82 = check_proj(chain82)

	ax.plot(zp[chain81], xp[chain81], yp[chain81], ls='-', color='black')
	ax.plot(zp[chain82], xp[chain82], yp[chain82], ls='-', color='brown')

	#面部轮廓
	chain91 = [i for i in range(127, 144)]
	chain91 = check_proj(chain91)

	ax.plot(zp[chain91], xp[chain91], yp[chain91], ls='-', color='orange')

	if add_line == True:
		chain0 = [1, 10, 11, 12, 13, 14, 15, 16, 17]
		chain01 = [20, 26, 25, 24]
		chain02 = [23, 48, 47, 46]
		ax.plot(zp[chain0], xp[chain0], yp[chain0], ls='-', color='black')
		ax.plot(zp[chain01], xp[chain01], yp[chain01], ls='-', color='black')
		ax.plot(zp[chain02], xp[chain02], yp[chain02], ls='-', color='black')

	ax.view_init(elev=15, azim=20);

	ax.set_xlabel('Z')
	ax.set_ylabel('X')
	ax.set_zlabel('Y')

	# 设置坐标轴范围
	(x_max, x_min, y_max, y_min, z_max, z_min) = max_min

	ax.set_xlim(z_min, z_max)
	ax.set_ylim(x_min, x_max)
	ax.set_zlim(y_min, y_max)
	ax.invert_zaxis()  # 反转Y轴（图像坐标系）
	ax.set_title('3D Skeleton Animation')
	ax.set_box_aspect([z_max-z_min, x_max-x_min, y_max-y_min])  # 保持纵横比

	# 如果你想要具体的像素，比如 1200x800，可以这样设置：
	fig.set_size_inches(25000/500, 25000/500)  # 1200x800 像素，dpi=300
	#plt.savefig('133-144test_all_ongcn.jpg', dpi=500, bbox_inches='tight', pad_inches=0)

	# 将多帧plt图像传给opencv并保存为视频
	fig.canvas.draw()
	buf = np.frombuffer(fig.canvas.buffer_rgba(), dtype=np.uint8)
	w, h = fig.canvas.get_width_height()
	img = buf.reshape(h, w, 4)[..., :3]
	plt.close(fig)

	return img

print(f'{output_npy_folder}/{part}/keypoints.npy')
			keypoints = np.load(f'{output_npy_folder}/{part}/keypoints.npy')
			keypoints3D = np.load(f'{output_npy_folder}/{part}/keypoints3D.npy')
			kpts_center = np.load(f'{output_npy_folder}/{part}/kpts_center.npy')
			kpt_scale = np.load(f'{output_npy_folder}/{part}/kpt_scale.npy')
			clip_idx = np.load(f'{output_npy_folder}/{part}/clip_idx.npy')
			keypoints3D68 = np.load(f'{output_npy_folder}/{part}/keypoints3D68.npy')
			print('keypoints shape', keypoints.shape) #keypoints shape (num_frames, 133, 2)
			print('keypoints3D shape', keypoints3D.shape) #keypoints3D shape (num_frames, 144, 3)
			print('kpts_center shape', kpts_center.shape) #kpts_center shape (num_frames, 2)
			print('kpt_scale shape', kpt_scale.shape) #kpt_scale shape (num_frames,)
			print('clip_idx shape', clip_idx.shape) #clip_idx shape (num_frames,)
			print('keypoints3D68 shape', keypoints3D68.shape) #keypoints3D shape (num_frames, 68, 3)
			print('\n')
			key68ori = np.load(f'{output_clip_folder}/key3D68_clip_data_test.npy')
			key68ori = key68ori[:len(kpt_scale)]

			if kpts144_draw == True:
				origin_kpts3D = np.zeros_like(keypoints3D)
				origin_kpts3D[..., :2] = keypoints3D[..., :2] * kpt_scale[:, None, None] + kpts_center[:, None, :]
				origin_kpts3D[..., 2] = keypoints3D[..., 2] * 1600

				#plot转np
				x_min, x_max = np.min(np.min(origin_kpts3D[..., 0], axis=0), axis=0) - 50, np.max(np.max(origin_kpts3D[..., 0], axis=0), axis=0) + 50
				y_min, y_max = np.min(np.min(origin_kpts3D[..., 1], axis=0), axis=0) - 50, np.max(np.max(origin_kpts3D[..., 1], axis=0), axis=0) + 50
				z_min, z_max = np.min(np.min(origin_kpts3D[..., 2], axis=0), axis=0) - 50, np.max(np.max(origin_kpts3D[..., 2], axis=0), axis=0) + 50

				out = cv2.VideoWriter(f'skeleton3D_{part}_Centerbase_kpts144_video.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 15, (5000, 5000))
				for idx, frame in enumerate(origin_kpts3D[1000:1500]):
					
					print('Drawing Frame idx: ', idx)
					plot_frame = plot(frame, (x_max, x_min, y_max, y_min, z_max, z_min), idx_map=smplx_openpose_coco_key68_idxmap, choice=3)
				
					#得到的np数据给cv写为mp4
					#h, w, _ = plot_frame.shape
					print('Writint Frame idx: ',idx)
					out.write(cv2.cvtColor(plot_frame, cv2.COLOR_RGB2BGR))
				out.release()
			
			if kpts68_draw == True:
				origin_kpts3D = np.zeros_like(key68ori)
				origin_kpts3D[..., :2] = key68ori[..., :2] * kpt_scale[:, None, None] + kpts_center[:, None, :]
				origin_kpts3D[..., 2] = key68ori[..., 2] * 1600

				#plot转np
				x_min, x_max = np.min(np.min(origin_kpts3D[..., 0], axis=0), axis=0) - 50, np.max(np.max(origin_kpts3D[..., 0], axis=0), axis=0) + 50
				y_min, y_max = np.min(np.min(origin_kpts3D[..., 1], axis=0), axis=0) - 50, np.max(np.max(origin_kpts3D[..., 1], axis=0), axis=0) + 50
				z_min, z_max = np.min(np.min(origin_kpts3D[..., 2], axis=0), axis=0) - 50, np.max(np.max(origin_kpts3D[..., 2], axis=0), axis=0) + 50

				out = cv2.VideoWriter(f'skeleton3D_{part}_Centerbase_kpts68ori_video.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 15, (5000, 5000))
				for idx, frame in enumerate(origin_kpts3D[1000:1500]):
					
					print('Drawing Frame idx: ', idx)
					plot_frame = plot(frame, (x_max, x_min, y_max, y_min, z_max, z_min), idx_map=smplx_openpose_coco_key68_idxmap, choice=3, add_line=True)
				
					#得到的np数据给cv写为mp4
					#h, w, _ = plot_frame.shape
					print('Writint Frame idx: ',idx)
					out.write(cv2.cvtColor(plot_frame, cv2.COLOR_RGB2BGR))
				out.release()

